[import]
# the 'import' section is run prior to any existing lambda expression.
# therefore all that is imported here, will be available in any successive action.
# this is also a nice place to add your own library hacks!
os: os
sh: shutil
m:  musync.custom

[general]

### Static Variables ###
# root directory (used in 'targetpath').
root:"/mnt/hdb1/music"

# Which printer levels that should be suppressed on 'silent'
suppressed: ["notice", "warning"]

# Which configurations to overlay.
configurations: ["copy"]

### Behaviour Modifiers ###
pretend:    False
force:      False
silent:     False
checkhash:  True

### Required Functions ###
## Therse are and must be lambda expression (e.g. of python type: types.FunctionType)
## Which could be a normal function (def) aswell imported elsewhere.
# How musync removes files
rm:   lambda p: os.unlink(p.path)

# How musync add files (note; will be overwritten by 'configurations')
add:  lambda src, dst: sh.move(src, dst)

# How musync performs checksums on a file, must return a file-unique string.
hash: lambda target: m.md5sum(target)

# targetpath helper functions
cfilter: lambda value: m.ue(m.lexer("/etc/musync.rules", value).lower())
cdir:    lambda meta: "{0}/{1:0>4d}-{2}".format(cfilter(meta.artist) or "no-artist", meta.year or 0, cfilter(meta.album) or "no-album")
cfile:   lambda meta: "{0:0>2d}-{1}.{2}".format(meta.track or 0, cfilter(meta.title) or "no-title", meta.ext)

targetpath: lambda p: os.path.join(cdir(p.meta), cfile(p.meta))

# Where to find the lock-database.
# this is just a flat-file database where each line indicates a file or directory that is locked.
# Musync will not perform any action against a locked file or directory other than 'unlock'
lockdb: lambda: os.path.join(root, ".lock")

[copy]
# Safe copy operation, this will be retried if the checksums do not match.
add: lambda src, dst: sh.copy(src, dst)

[move]
# Destructive move operation, if this fails, there will be no turning back.
add: lambda src, dst: sh.move(src, dst)

[dap]
### Static Variables ###

# New root for Digital Audio Players.
root:"/mnt/dap/music"

### Required Functions ###
# Transcoding (used if defined, e.g. not None)
# m.case: a helper function which matches the first argument either like:
#    m.case("foo", foo=returnvalue)
# or:
#    m.case("foo", ("foo", returnvalue));
# or:
#    m.case("foo", (["foo", "bar", "baz"], returnvalue)); // a list or a tuple where any matches.
#
# therefore, the extension will be matched against different selections.
transcode:lambda src: m.case(src.ext, (('flac', 'wav'), ('ogg', x_to_ogg)))

# Transcoding helper function.
x_to_ogg:lambda src, dst: m.system("/usr/bin/oggenc", src, "-o", dst, "-q", "8")
