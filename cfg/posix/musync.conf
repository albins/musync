# this file is: /etc/musync.conf
# I can also be in: ~/.musync
#
# first off:
# MUSYNC WILL NOT FIX BROKEN META DATA
#
# therefore if you (theoretically of course) download a bunch of 'scene'
# music and just go ahead and add them using musync - chanses are you will
# get dissapointed.  Yes, even 'scene' music sucks at tagging. Use a tagger
# like Musicbrainz Picard to properly tag your music _before_ trying to add it.
#

[general]

# This section will always be used.  All the other sections are optional
# and will only be used if specified with the key 'default-config' or if
# specifically used when running musync (-c [section],..)
# 
# When used with musync the sections are read from left to right, you will
# get an error when using cyclic options (infinite recursion).
# 
# The general rule of thumb is that each key here has it's counteroption in
# the commandline interface.  This means that writing 'pretend: true' would
# be the same as using 'musync --pretend'.  Commandline options _always_
# has precedence.

# if you look in the [main] section, you see a root and a new default-config specified.
# specifies 'default-config'
default-config: main

# pretend tells musync to not actually 'do' anything but just explain what it would do.
pretend: false

# Default config, this is what is used with the option -c or --config if it isn't defined
default-config: copy
# default-config: copy,big

# Coloring of output.
coloring: true

# Log-files...
log: /tmp/musync.log
fix-log: /tmp/musync-fixes.log

# Force is used in different contexts, it is greatly discouraged to set it other than 'false'
force: false
# These are the different commands that are run when certain actions are performed.
#add-with: ln -s %(source)s %(dest)s
rm-with: os.unlink(target)

# This is what musync filters it's text strings trough.
# Track number is not filtered.
# the different fields are artist, album and title.
#filter-with: /usr/bin/sed -r -f /etc/musync.%(field)s.sed
filter-with: musync.filter(string, "/bin/sed", "-r", "-f", "/etc/musync.sed")

# Specifies how to create the hash, the output is splitted by whitespace and the first split is used.
hash-with: musync.execute("/usr/bin/md5sum", target)

# Add command musync uses.
add-with: shutil.move(src, dst)

# Weither to check hash or not.
check-hash: true

# Default configuration
default-config: main

# Dateformat
# scan for dates in the 'date' metadata tag.
# modify this format if 'year' cannot be captured properly (and is set to 0000).
# please contribute your modifications to the authors!
# values are seperated by '|' (pipe)
dateformat:%Y|%Y-%m|%Y-%m-%d|%Y/%m/%m

# Formatting of music files
# it is imperative you _do not_ change the type (e.g. 'd' to 's') since musync expects 
# the input to be of these types.
# the keys available:
#     %(artist)s
#     %(album)s
#     %(track)02d     // 02d specifies two digits with leading zeroes, this is python format.
#     %(year)04d      // will try to scan year using 'dateformat', otherwise will be 0000.
#     %(ext)s  
dir: %(artist)s/%(year)04d-%(album)s
format: %(track)02d-%(title)s.%(ext)s

# These are the supported file extensions.
# If file encountered that isn't listed here, it will be ignored with a nice notice.
supported-ext: mp3,ogg,flac

# Define what noticelevels are supressed.
# available are:
#     notice - general notices, not important but informative.
#     warning - musync explains why it couldn't do a certain action, this should be visible.
#     error - this is when musync encounters a fatal exception and has to stop short in execution.
suppressed: notice,warning
silent:     false

# - transcoding -
# transcoding has been formed to be as simple and customizable as possible.
# the key that a certain transcoding will look for is *ext*-to-*ext*.
# the command that is used must of course exist on the system.
# the available variables are:
#   %(source)s - the source file (the one to be transcoded).
#   %(dest)s - the destination file (the result of the transcoding).
# uncomment these and modify to your needs.
#wav-to-ogg: oggenc %(source)s -o %(dest)s -q 8
flac-to-ogg: musync.exec("/usr/bin/oggenc", src, "-o", dst, "-q", "8")

# transcode formats
# this key means to transform all wav and flac files to ogg.
# this is useful when putting your music into (for example) a digital audio player.
# This key means; transcode wav and flac into ogg.
# Note: the 'wav-to-ogg' key is missing.
#transcode: wav,flac=ogg

lock-file: .lock
root: /mnt/hdb1/music

[main]
#
# specifies root directory, tells where the lockfile will be and what the default action should be (by configuration recursion).
#

# The root directory where the filestructure will be built.
# lock-database, this defines all files/directories that are currently locked.
# this is relative to the database root
# use 'copy action' as default config.
default-config: copy

[link]
#
# i had a friend that used to symlink his entire music library from is "import" catalogue without having to copy or move
# the original files. This is very useful when doing something like that.
# 
# use by setting option '-c link' with musync.
#
check-hash: false
add-with: os.symlink(src, dst)

[copy]
#
# this is generally the most used option.
# why you don't want to 'mv' the files: 
#

# copy is the default action.
add-with: shutil.copy(src, dst)

[move]
# use move at your own risk, hashing will currently not work.
#check-hash: false
add-with: shutil.move(src, dst)

[dap]
#
# I use this to sync agains my digital audio player.
#

transcode: flac=ogg
root: /mnt/music/music
default-config: move
silent: false

[search-year]
add-with: /bin/ln -s %(source)s %(dest)s
check-hash: false
dir: search-year/%(year)04d/%(artist)s-%(album)s

[cwd]
root: .
